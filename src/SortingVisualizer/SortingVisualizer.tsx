/* useState is used to manage state in functional components, 
useEffect is used to handle side effects, such as fetching data or setting up event listeners.*/
import { useState, useEffect } from "react";

/* Array bar*/
import ArrayBar from "./Components/ArrayBar/ArrayBar";

/* Style*/
import "./SortingVisualizer.css";

/*This component is a function that returns JSX (a syntax extension for JavaScript). */
const SortingVisualizer = () => {
  /* Use the useState hook to initialize a state variable named array. 
  The state is initialized as an empty array of numbers ([]).
  The useState hook returns an array with two elements: 
  the current state value (array) and a function to update the state (setArray).
  The type annotation <number[]> specifies that the array state will hold an array of numbers.*/
  const [array, setArray] = useState<number[]>([]);

  /* Do a helper function named randomIntFromInterval that generates a random integer within a specified interval.
  The function takes two parameters: min and max, both of type number.
  The function uses Math.random() to generate a random number and then scales it to fit within the specified range.*/
  const randomIntFromInterval = (min: number, max: number) => {
    return Math.floor(Math.random() * (max - min + 1) + min);
  };

  /*This line defines a function named resetArray that resets the array state.
  Inside the function:
  An empty array newArray is created.
  A loop runs 100 times, each time pushing a random integer generated by randomIntFromInterval(10, 1000) into newArray.
  Finally, the setArray function is called to update the array state with the new array.*/
  const resetArray = () => {
    const newArray = [];
    for (let i = 0; i < 10; i++) {
      newArray.push(randomIntFromInterval(10, 100));
    }
    setArray(newArray);
  };

  /*This line uses the useEffect hook to run the resetArray function once when the component mounts.
  The first argument to useEffect is a function that will be executed. Here, it simply calls resetArray().
  The second argument is an array of dependencies. 
  An empty array [] means the effect will only run once, when the component is first rendered.*/
  useEffect(() => {
    resetArray();
  }, []);

  /*This line returns the JSX that will be rendered by the component.
  The JSX uses the array.map method to iterate over the array state and create a list of <div> elements.
  Each <div> element has a class name of "array-bar" and a unique key set to the index idx of the array element.
  Inside each <div>, the value of the array element is displayed.*/
  return (
    <div className="main-container">
      <div className="text-container">
        {array.map((value, idx) => (
          <div className="array-bar" key={idx} data-testid={`arrayBar`}>
            {value}-
          </div>
        ))}
      </div>
      {/* --------------------- BARS : 74% Height --------------------- */}
      <ArrayBar array={array} />
    </div>
  );
};

export default SortingVisualizer;
